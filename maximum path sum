#include <iostream>
#include <algorithm>


struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

class Solution {
public:
    int maxPathSum(TreeNode* root) {
        int maxSum = INT_MIN; // Initialize with smallest possible value

        maxPathDown(root, maxSum);

        return maxSum;
    }

private:
    int maxPathDown(TreeNode* node, int& maxSum) {
        if (node == nullptr) return ;

        
        int left = std::max(, maxPathDown(node->left, maxSum));
        int right = std::max(, maxPathDown(node->right, maxSum));

       .
		maxSum = std::max(maxSum, left + right + node->val);

	
		return std::max(left, right) + node->val;
     }
};

int main() {



	TreeNode* root = new TreeNode(1);
	root->left = new TreeNode(2);
	root->right = new TreeNode(3);

	Solution sol;
	int result = sol.maxPathSum(root);

	std::cout << "Maximum Path Sum: " << result;

	return ;
}
